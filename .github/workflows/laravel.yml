name: Laravel CI

on:
  push:
    branches: ["main", "development"]
  pull_request:
    branches: ["main"]

jobs:
  # --- JOB 1: SETUP & CACHE (Ejecutado solo una vez) ---
  setup:
    name: Setup & Cache Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        id: composer-cache-step
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        if: steps.composer-cache-step.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node modules
        uses: actions/cache@v4
        id: npm-cache-step
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install NPM dependencies
        if: steps.npm-cache-step.outputs.cache-hit != 'true'
        run: npm ci

  # --- JOB 2: LINTING (Paralelo a Tests y Build) ---
  lint:
    name: Check Code Style (Pint)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2

      - name: Restore Composer Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run Laravel Pint
        run: ./vendor/bin/pint --test

  # --- JOB 3: TESTING (Paralelo a Lint y Build) ---
  tests:
    name: Run PHPUnit/Pest Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: numista_test
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo, pdo_pgsql, zip, intl, gd
          
      - name: Copy .env file
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Restore Composer Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress

      - name: Generate app key
        run: php artisan key:generate

      - name: Execute tests (Pest)
        run: php artisan test
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: numista_test
          DB_USERNAME: user
          DB_PASSWORD: password

  # --- JOB 4: BUILD FRONTEND ASSETS (Paralelo a Lint y Tests) ---
  build:
    name: Build Frontend Assets
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Restore Node modules Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install NPM dependencies
        run: npm ci

      - name: Build assets
        run: npm run build