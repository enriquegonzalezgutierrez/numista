<?php

// database/seeders/ItemSeeder.php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Collection as EloquentCollection;
use Illuminate\Support\Facades\Storage;
use Numista\Collection\Domain\Models\Attribute;
use Numista\Collection\Domain\Models\Category;
use Numista\Collection\Domain\Models\Collection;
use Numista\Collection\Domain\Models\Item;
use Numista\Collection\Domain\Models\Tenant;

class ItemSeeder extends Seeder
{
    /**
     * @var \Illuminate\Support\Collection<string, \Numista\Collection\Domain\Models\Attribute>
     */
    private EloquentCollection $attributes;

    public function run(): void
    {
        $tenant = Tenant::where('slug', 'coleccion-numista')->first();
        if (! $tenant) {
            $this->command->warn('Default tenant "coleccion-numista" not found. Skipping ItemSeeder.');

            return;
        }

        // Pre-load all attributes for this tenant for efficiency
        $this->attributes = Attribute::all()->keyBy(fn ($attr) => strtolower(str_replace(' ', '_', $attr->name)));

        // Clean previous items and images
        Item::where('tenant_id', $tenant->id)->get()->each(fn ($item) => $item->delete());
        Storage::disk('tenants')->deleteDirectory("tenant-{$tenant->id}");
        $this->command->info('Cleaned previous items and images for the tenant.');

        $imagePaths = $this->createPlaceholderImages($tenant->id);
        if (empty($imagePaths)) {
            $this->command->error('No placeholder images could be created. Aborting seeder.');

            return;
        }
        $this->command->info('Created '.count($imagePaths).' placeholder images.');

        $this->command->info('Creating a large volume of items with new attribute structure...');

        $this->createItemsForCategory($tenant, 'moneda-espanola', 'coin', 100, true);
        $this->createItemsForCategory($tenant, 'marvel', 'comic', 50);
        $this->createItemsForCategory($tenant, 'relojes-de-pulsera', 'watch', 75, true);
        $this->createItemsForCategory($tenant, 'sellos', 'stamp', 150, true);
        $this->createItemsForCategory($tenant, 'libros-y-manuscritos', 'book', 75);
        $this->createItemsForCategory($tenant, 'arte-y-antiguedades', 'art', 50, true);

        $allItems = Item::where('tenant_id', $tenant->id)->get();
        $allCollections = Collection::where('tenant_id', $tenant->id)->get();

        if ($allCollections->isNotEmpty() && $allItems->isNotEmpty()) {
            $this->attachItemsToCollections($allItems, $allCollections);
        }

        $this->attachImagesToItems($allItems, $imagePaths);

        $this->command->info("Item seeder finished. {$allItems->count()} items created with relations and images.");
    }

    private function createItemsForCategory(Tenant $tenant, string $categorySlug, string $itemType, int $count, bool $isForSale = false): void
    {
        $category = Category::where('slug', $categorySlug)->first();
        if (! $category) {
            $this->command->warn("Category '{$categorySlug}' not found. Skipping item creation.");

            return;
        }

        for ($i = 0; $i < $count; $i++) {
            // Use factory->make() to get an array of attributes without saving to DB
            $itemData = Item::factory()->{$itemType}()->make([
                'tenant_id' => $tenant->id,
            ]);

            // Create the core Item model
            $item = Item::create([
                'tenant_id' => $tenant->id,
                'name' => $itemData->name,
                'description' => $itemData->description,
                'type' => $itemData->type,
                'quantity' => $itemData->quantity,
                'purchase_price' => $itemData->purchase_price,
                'purchase_date' => $itemData->purchase_date,
                'status' => $isForSale ? 'for_sale' : 'in_collection',
                'sale_price' => $isForSale ? $itemData->purchase_price * fake()->randomFloat(2, 1.2, 2.5) : null,
            ]);

            // Attach the item to its main category
            $item->categories()->attach($category->id);

            // Now, attach all the attributes based on the data generated by the factory
            $this->attachAllAttributes($item, $itemData, $itemType);
        }
    }

    private function attachAllAttributes(Item $item, Item $itemData, string $itemType): void
    {
        // Common attributes
        $this->attachAttribute($item, 'grade', $itemData->grade);
        $this->attachAttribute($item, 'year', $itemData->year);
        $this->attachAttribute($item, 'country', $itemData->country?->name);

        switch ($itemType) {
            case 'coin':
                $this->attachAttribute($item, 'denomination', $itemData->denomination);
                $this->attachAttribute($item, 'mint_mark', $itemData->mint_mark);
                $this->attachAttribute($item, 'composition', $itemData->composition);
                $this->attachAttribute($item, 'weight', $itemData->weight);
                break;
            case 'banknote':
                $this->attachAttribute($item, 'denomination', $itemData->denomination);
                $this->attachAttribute($item, 'serial_number', $itemData->serial_number);
                break;
            case 'comic':
                $this->attachAttribute($item, 'publisher', $itemData->publisher);
                $this->attachAttribute($item, 'issue_number', $itemData->issue_number);
                $this->attachAttribute($item, 'cover_date', $itemData->cover_date);
                break;
            case 'watch':
                $this->attachAttribute($item, 'brand', $itemData->brand);
                $this->attachAttribute($item, 'model', $itemData->model);
                $this->attachAttribute($item, 'material', $itemData->material);
                break;
            case 'stamp':
                $this->attachAttribute($item, 'face_value', $itemData->face_value);
                break;
            case 'book':
                $this->attachAttribute($item, 'author', $itemData->author);
                $this->attachAttribute($item, 'publisher', $itemData->publisher);
                $this->attachAttribute($item, 'isbn', $itemData->isbn);
                break;
            case 'art':
                $this->attachAttribute($item, 'artist', $itemData->artist);
                $this->attachAttribute($item, 'dimensions', $itemData->dimensions);
                $this->attachAttribute($item, 'material', $itemData->material);
                break;
        }
    }

    /**
     * Helper to attach a single attribute value to an item.
     * Uses the pre-loaded attributes collection for performance.
     */
    private function attachAttribute(Item $item, string $attributeKey, mixed $value): void
    {
        if (empty($value)) {
            return;
        }

        $attribute = $this->attributes->get($attributeKey);

        if ($attribute) {
            $pivotData = ['value' => $value];

            // --- THIS IS THE NEW LOGIC ---
            // If the attribute is a 'select', find the corresponding AttributeValue ID
            if ($attribute->type === 'select') {
                $attributeValue = $attribute->values()->where('value', $value)->first();
                if ($attributeValue) {
                    // Store the ID of the selected option
                    $pivotData['attribute_value_id'] = $attributeValue->id;
                }
            }
            // --- END OF NEW LOGIC ---

            $item->attributes()->attach($attribute->id, $pivotData);
        }
    }

    private function attachItemsToCollections(EloquentCollection $items, EloquentCollection $collections): void
    {
        $collections->each(function (Collection $collection) use ($items) {
            $itemsToAttach = $items->random(min($items->count(), rand(15, 50)))->pluck('id');
            $collection->items()->sync($itemsToAttach);
        });
    }

    private function attachImagesToItems(EloquentCollection $items, array $imagePaths): void
    {
        if (empty($imagePaths)) {
            return;
        }

        foreach ($items as $item) {
            $numberOfImages = rand(3, 5);
            $selectedImagePaths = (new EloquentCollection($imagePaths))->random($numberOfImages)->all();

            foreach ($selectedImagePaths as $index => $path) {
                $item->images()->create([
                    'path' => $path,
                    'alt_text' => 'Image for '.$item->name,
                    'order_column' => $index + 1,
                ]);
            }
        }
    }

    private function createPlaceholderImages(int $tenantId): array
    {
        $disk = Storage::disk('tenants');
        $targetDirectory = "tenant-{$tenantId}/item-images";
        $disk->makeDirectory($targetDirectory);

        $sourceDir = base_path('database/seeders/placeholders');
        $placeholderFiles = scandir($sourceDir);

        $createdPaths = [];
        if ($placeholderFiles === false) {
            return [];
        }

        foreach ($placeholderFiles as $file) {
            if (pathinfo($file, PATHINFO_EXTENSION) === 'svg') {
                $sourcePath = $sourceDir.'/'.$file;
                $newFilename = uniqid().'-'.$file;

                $disk->put(
                    $targetDirectory.'/'.$newFilename,
                    file_get_contents($sourcePath)
                );

                $createdPaths[] = $targetDirectory.'/'.$newFilename;
            }
        }

        return $createdPaths;
    }
}
